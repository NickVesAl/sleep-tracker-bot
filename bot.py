import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "8128014975:AAHwYRzNnFPoUuaYbCf9vhqTz01HwUfCngQ"
YOUR_CHAT_ID = None  # –ø–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ /start
SPREADSHEET_NAME = "SleepLog"

# --- Google Sheets ---
def get_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open(SPREADSHEET_NAME).sheet1
    return sheet

# --- –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_data = {}

async def ask_questions(bot: Bot):
    global YOUR_CHAT_ID
    if YOUR_CHAT_ID is None:
        print("‚ùå YOUR_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /start –±–æ—Ç—É")
        return
    await bot.send_message(YOUR_CHAT_ID, "üõå –í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ª—ë–≥?")
    user_data[YOUR_CHAT_ID] = {'stage': 1}

# --- –û—Ç–≤–µ—Ç—ã ---
async def handle_message(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()

    if chat_id not in user_data:
        await message.answer("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, –∫—É–¥–∞ –ø–∏—Å–∞—Ç—å.")
        return

    stage = user_data[chat_id]['stage']

    if stage == 1:
        user_data[chat_id]['sleep_time'] = text
        user_data[chat_id]['stage'] = 2
        await message.answer("üåû –í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è?")
    elif stage == 2:
        user_data[chat_id]['wake_time'] = text
        user_data[chat_id]['stage'] = 3
        await message.answer("üòä –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –æ—Ç 1 –¥–æ 10?")
    elif stage == 3:
        user_data[chat_id]['mood'] = text
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —ç—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü—É.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        sheet = get_sheet()
        today = datetime.now().strftime("%d.%m.%Y")
        sheet.append_row([
            today,
            user_data[chat_id]['sleep_time'],
            user_data[chat_id]['wake_time'],
            user_data[chat_id]['mood']
        ])

        del user_data[chat_id]

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start_handler(message: types.Message):
    global YOUR_CHAT_ID
    YOUR_CHAT_ID = message.chat.id
    await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –Ø –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    dp.message.register(start_handler, Command("start"))
    dp.message.register(handle_message)

    scheduler = AsyncIOScheduler()
    scheduler.add_job(ask_questions, "interval", minutes=1, args=[bot])  # ‚è∞ 9:00 –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    scheduler.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
